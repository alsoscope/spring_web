<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="product">
	<!-- DB에서 오는 컬럼명과 java에서 처리하는 변수명 일치를 위해 alias 처리 -->
	<!-- 01. 상품 전체 목록 -->
	<select id="listProduct" resultType="com.p.project.DTO.ProductDTO">
		SELECT * FROM tbl_product ORDER BY product_id desc
		
		<!-- SELECT product_id AS productId, product_name AS productName, product_price AS producrPrice, 
		product_desc AS productDesc, product_url AS productUrl
		FROM tbl_product ORDER BY product_name -->
	</select>
	
	<!-- 02. 상품 상세 보기 -->
	<select id="detailProduct" resultType="com.p.project.DTO.ProductDTO">
		SELECT product_id, product_name, product_price, product_desc
		FROM tbl_product WHERE product_id=#{productId}
		
		<!-- SELECT product_id AS productId, product_name AS productName, product_price AS producrPrice, 
		product_desc AS productDesc, product_url AS productUrl
		FROM tbl_product WHERE product_id=#{productId} -->
	</select>
	
	<!-- 03. 상품 등록하기 tbl_product, tbl_attach와 참조 무결성 제약으로 트랜잭션된다. 
	useGeneratedKeys : 사용하는 DB에서 자체적으로 생선한 키(ex:auto_increment)를 받는 옵션, 디폴트는 false이므로 값을 받고자 할 경우 true로 정의
	keyProperty : INSERT/UPDATE 쿼리에만 적용되는 속성, return값으로 보내주고자 하는 컬럼명을 정의-->
	<!-- <insert id="insertProduct" parameterType="com.p.project.DTO.ProductDTO" useGeneratedKeys="true" keyProperty="product_id">
		INSERT INTO tbl_product (product_name, product_price, product_desc)
		VALUES ( #{product_name},#{product_price},#{product_desc} ) -->
	<insert id="insertProduct" parameterType="com.p.project.DTO.ProductDTO" useGeneratedKeys="true" keyProperty="product_id">
		INSERT INTO tbl_product (product_name, product_price, product_desc)
		VALUES ( #{product_name},#{product_price},#{product_desc} )
			
		<!-- selectKey를 이용하는 방법 -->
		<selectKey resultType="int" keyProperty="product_id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		
		<!-- values ( #{product_name},#{product_price},#{product_desc},#{product_url} ) -->
	</insert>
	
	<!-- 첨부파일 기능 : tbl_attach MySQL의 경우, 바로 직전에 생성된 PK를 알아낼 때 LAST_INSERT_ID()를 활용 -->
	<!-- <insert id="addAttach">
		INSERT INTO tbl_attach (fullName, product_id)
		VALUES (#{fullName}, LAST_INSERT_ID())
	</insert> -->
	
	<!-- 첨부파일 -->
	<insert id="addAttach">					
		insert into tbl_attach (fullName, product_id)
		values (#{fullName}, #{product_id})		
		<!-- INSERT INTO tbl_attach (fullName, product_id) VALUES (#{fullName}, #{product_id, jdbcType=INTEGER}) -->
	</insert>
	
	<!-- 04. 상품 수정/편집 -->
	<update id="updateProduct">
		update tbl_product set product_name=#{product_name}, product_price=#{product_price}, 
		product_desc=#{product_desc}
		where product_id=#{product_id}
	</update>
	
	<!-- 05. 상품 레코드 삭제 처리 -->
	<delete id="deleteProduct">
		delete from tbl_product
		where product_id=#{product_id}
	</delete>
	
	<!-- 06. 삭제를 위한 상품 이미지 파일 이름 select -->
	<!-- <select id="fileInfo" resultType="String">
		select product_url from tbl_product
		where product_id=#{product_id}
	</select> -->
	
	<!-- 페이징 처리 -->
	<select id="listCriteria" resultType="com.p.project.DTO.ProductDTO">
		<![CDATA[
			select * from tbl_product where product_id > 0
			order by product_id desc limit #{pageStart}, #{perPageNum}
		]]>
	</select>
	
	<select id="countPaging" resultType="int">
	<![CDATA[
		select count(product_id) from tbl_product where product_id > 0
	]]>
	</select>
	
	<!-- 특정 게시물의 첨부파일을 시간 순서대로 가져오는 SQL문 -->
	<select id="getAttach" resultType="string">
		select fullName from tbl_attach where product_id=#{product_id} order by regdate
	</select>
	
	<!-- ********//////무한 스크롤 테스트//////******** -->
	<!-- <select id="listTest" resultType="com.p.project.DTO.ProductDTO">
		SELECT * FROM tbl_product where product_id > 0 ORDER BY product_id asc limit 0, 10;
	</select>
	
	게시물 조회(무한 스크롤 다운) 마지막 product_id가 integer타입으로 넘어오는 상태. controller에서 product_id-1에 해당하는 것을 dao로 넘겨줄 것
	<select id="infiniteScrollDown" resultType="com.p.project.DTO.ProductDTO">
		<![CDATA[
		select * from tbl_product where product_id <= #{product_id} and product_id > #{product_id}-10
		order by product_id asc
		]]>
	</select>
	
	마지막 product_id를 넘겨서 offset을 다르게 주어도 되지만 이론상 가장 첫 번째의 product_id를 받아와서 그것보다 먼저의 게시물 10개를 받아오는 것이 자연스럽기에 그렇게 구현함
	<select id="infiniteScrollUp" resultType="com.p.project.DTO.ProductDTO">
		<![CDATA[
		select * from tbl_product where product_id >= #{product_id} and product_id < #{product_id}+10
		order by product_id asc
		]]>
	</select> -->
	<!-- ********//////무한 스크롤 테스트//////******** -->
</mapper>